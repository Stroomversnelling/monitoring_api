openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://enermatics.eu/test/energiesprong/performancev2/1.0.0
info:
  version: "0.4.6"
  title: Stroomversnelling PDB API
  description: >-
    The PDB API is part of a standard for exchanging energy performance monitoring data. <br/> > The other part of this standard can be found here: https://app.swaggerhub.com/apis/energiesprong/user/0.1.0. <br/> > The full documentation for the standard is available here: https://github.com/Stroomversnelling/monitoring_api/wiki. <br/><br/>The PDB API describes how energy performance data can be requested from the performance database (PDB) of a monitoring provider. <br/><br/>This standard is still in development and is provided as-is. Clarification and further information can be requested by sending an email to mwitkamp@stroomversnelling.nl. Stroomversnelling is a not-for profit association of mostly housing cooperations, building companies and municipalities striving to facilitate the renewable energy transition in the built environment. This API was co-developed with industry partners Enermatics, LENS, Fifthplay, ABB, Enervalis and Swycs.<br/><br/>Technical notes: <br/> > This version of the PDB API is read-only, however future versions may include the possibility to write. <br/> > At the moment, the bearer tokens contain custom claims such as the user's role and targeted PDB for which the token was created. This needs to be validated by the PDB according to the JWT standard. Read-only access is assumed for now.

security:
  - application:
      - read
  - JWTBearerAuth: []

paths:
  '/{connection_id}/profile':
    get:
      summary: Provides the profile object for a specific connection.
      description: Provides the profile object for a specific connection, which includes metadata about the connection. This metadata includes the site object with variables specific to the location of the connection (e.g. timezone, location). The profile will also return an array of norms that the connections supports (optional).
      parameters: 
      - name: connection_id
        in: path
        description: Unique connection identifier
        required: true
        schema: 
          type: string
      responses:
        '200': 
          description: OK
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/profile'
        '400':
          description: Bad input parameter
          
  '/{connection_id}/norm':
    get:
      summary: List all the supported norms available for a specific connection.
      description: Returns an array of supported norms for a specific connection. The level of detail can be adjusted using the norm_object_type parameter in the query string. The default is to provide only the norm definition. If so requested, not only the norm definition will be returned, but also an array of all related data objects.
      parameters: 
      - name: connection_id
        in: path
        description: Unique connection identifier
        required: true
        schema: 
          type: string
      - name: norm_object_type
        in: query
        description: The type of norm object type response detail requested. 
        required: false
        schema: 
          type: string
          enum:
            - norm_definition
            - norm_definition_and_data_objects
      responses:
        '200': 
          description: OK
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/norm_array'
        '400':
          description: Bad input parameter
          
  '/{connection_id}/norm/{norm_id}':
    get:
      summary: Lists all variables available for a connection that are part of a specific norm.
      description: Returns the available variables within a certain norm for a specific connection. Unless specified, the default format is the full norm object with definition and related data object definitions.
      parameters: 
      - name: norm_id
        in: path
        description: Unique norm identifier
        required: true
        schema: 
          type: integer
      - name: connection_id
        in: path
        description: Unique connection identifier
        required: true
        schema: 
          type: string
      - name: norm_object_type
        in: query
        description: The type of norm response requested.
        required: false
        schema: 
          type: string
          enum:
            - norm_definition
            - norm_data_objects_only
            - norm_definition_and_data_objects
      responses:
        '200': 
          description: OK
          content: 
            application/json:
              schema: 
                oneOf:
                  - $ref: '#/components/schemas/norm_definition'
                  - $ref: '#/components/schemas/norm_data_objects_only'
                  - $ref: '#/components/schemas/norm_definition_and_data_objects'
        '400':
          description: Bad input parameter
  
  '/{connection_id}/data_object':
    get:
      summary: Returns an array of connection specific data objects. These objects can be filtered for a specific norm.
      description: Returns a collection of data for a specific connection. The "data_object_type" is used to determine whether the query returns the definition of the data_object, an array of measurements, or both. 
      parameters: 
      - name: connection_id
        in: path
        description: Unique connection identifier
        required: true
        schema: 
          type: string
      - name: start
        in: query
        description: Start timestamp of requested measurements, in seconds (POSIX).
        required: true
        schema: 
          type: number
      - name: end
        in: query
        description: End timestamp of requested measurements, in seconds (POSIX).
        required: true
        schema: 
          type: number
      - name: interval
        in: query
        description: Requested time interval between measurements as either a number of seconds or one of the standard time intervals "minimum" defined as the minimum interval available, "hour", "day", "week", "month", "year", "maximum" defined as the maximum interval available. If a number is given in seconds and that interval is not available, the closest available interval that is shorter will be returned. 
        required: false
        schema: 
          oneOf:
            - $ref: '#/components/schemas/time_series_standard_options/properties/interval_standard'
            - $ref: '#/components/schemas/time_series_seconds/properties/interval_seconds'
      - name: norm_id
        in: query
        description: Defines the norm for which to fetch data objects in an array.
        required: false
        schema: 
          type: string
      - name: object_id
        in: query
        description: Defines a specific data object for which to fetch data. This will return a single data object wrapped in the array.
        required: false
        schema: 
          type: string
      - name: data_object_type
        in: query
        description: The type of data object requested (just the definition, just the measurements, or both).
        required: false
        schema: 
          type: string
          enum:
            - data_object_definition
            - data_object_measurements
            - data_object_full
      responses:
        '200': 
          description: OK
          content: 
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/data_object_array'

        '400':
          description: Bad input parameter
  '/project/{project_id}':
    get:
      summary: Returns measurements per project. Not supported by UDB.
      description: Returns a specified collection of data for a specific project. Note that this is not supported by the UDB API specification and is a custom extension. There is no way for an app to fetch a list of project IDs from the UDB.
      parameters: 
      - name: project_id
        in: path
        description: Unique connection identifier
        required: true
        schema: 
          type: string
      - name: start
        in: query
        description: Starting timestamp, in seconds (POSIX).
        required: true
        schema: 
          type: number
      - name: end
        in: query
        description: End timestamp, in seconds (POSIX).
        required: true
        schema: 
          type: number
      - name: interval
        in: query
        description: Requested time interval between measurements as either a number of seconds or one of the standard time intervals "minimum" defined as the minimum interval available, "hour", "day", "week", "month", "year", "maximum" defined as the maximum interval available. If a number is given in seconds and that interval is not available, the closest available interval that is shorter will be returned. 
        required: false
        schema: 
          oneOf:
            - $ref: '#/components/schemas/time_series_standard_options/properties/interval_standard'
            - $ref: '#/components/schemas/time_series_seconds/properties/interval_seconds'
      - name: object_id
        in: query
        description: Defines a specific data object for which to fetch data. This will return a single data object wrapped in the array.
        required: false
        schema: 
          type: string
      responses:
        '200': 
          description: OK
          content: 
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/data_object_full'
        '400':
          description: Bad input parameter
components:
  schemas:
    profile:
      type: object
      description: The "profile" object lists certain metadata about the connection (often a home) under the "site" variable. <br/><br/>The "profile_log" contains information about when changes were made to the profile. <br/><br/>The "supported_norms" variable gives an array of norms supported by this connection. The supported norms are standards that apply to the connection, such as EPV, NOM Keur or Monitoring Norm. A typical connection will probably conform to more than one standard at a time. Per standard, specific data is available and can be requested. 
      properties:
        site:
          description: The site object is normally country specific but can, if a country specific site object has not (yet) been defined, also be global. The name when country specific is "site_xx", where xx stands for the ISO alpha-2 code of the country. For the Netherlands, this is "NL". 
          oneOf:
            - $ref: '#/components/schemas/site_global'
            - $ref: '#/components/schemas/site_NL'
            # the discriminator 
          #discriminator:
          #  propertyName: context
          #  mapping:
          #    global: '#/components/schemas/site_global'
          #    NL: '#/components/schemas/site_NL'
          example:
            coordinates: [52.0996009,4.2942053]
            tzid: "Europe/Amsterdam"
            context: "global"
        profile_log:
          $ref: '#/components/schemas/log'
        supported_norms:
          $ref: '#/components/schemas/norm_array'
      required: 
      - site
      - profile_log
    site_global:
      type: object
      description: The site_global object is used to list essential metadata associated with the connection that is irrespective of any country specific site information.
      properties:
        #It may be required to re-think coordinates as 5KM may or may not be considered sufficient ground for anonymization based on geography, density, context.
        coordinates:
          type: array
          description: These are a GPS coordinate scrambled with a 5KM radius. It is provided in the format of GeoJSON describes in A.1 Points of RFC 7946. The scrambled location should be calculated only once to ensure the location cannot be derived with repeated requests. It should be provided in WGS84 (or EPSG:4326) as specified in the RFC and has an optional third element.
          externalDocs:
            url: https://tools.ietf.org/html/rfc7946#appendix-A.1
          minItems: 2
          maxItems: 3
          items:
            type: number
        tzid:
          type: string
          description: The timezone ID of the connection should be in the format of the {Country}/{City} or metazone format such as  "Europe/Amsterdam". See the IANA TZID database or the CLDR metazone definitions http://unicode.org/repos/cldr/trunk/common/supplemental/metaZones.xml
          externalDocs:
            url: https://www.iana.org/time-zones
        context:
          type: string
          description: The describes the location of the connection from a political perspective. It should be either "global" (if no country specific site object has been defined) or the ISO Alpha-2 2-letter code for the country. This is used as the descriminator for the inheritance/use of country-specific parameters.
      required:
        - context
        - tzid
        - coordinates
    site_NL:
      # Note that the definition of the site level variables for a particular country is a combination of the global definition and country specific variables / properties. These are found in site_NL_specific in this case.
      allOf:
        - $ref: '#/components/schemas/site_global'
        - $ref: '#/components/schemas/site_NL_specific'
    site_NL_specific:
      type: object
      description: This lists country specific metadata about a connection situated in the Netherlands.
      required:
        - NL_construction_type
        - NL_usage_type
      properties:
        NL_construction_type:
          type: string
          description: The construction type based on the VERA standard defined in the Netherlands, as described in the "EENHEIDDETAILSOORT" variable, detailed in the "Vastgoed" tab of appendix F.2 of VERA version 3.1. If this API is used in another country, then the enumeration of options for construction types should be changed to fit the local context or put in a different variable.
          enum:
            - VRI
            - HAL
            - TWE
            - GTW
            - GWO
            - WOW
            - WOB
            - WAT
            - TUS
            - MAI
            - HOE
            - EIN
            - GAL
            - COR
            - POF
            - POW
            - BOV
            - BEN
            - ATE
            - BER
            - GAR
            - KAM
            - PAR
            - PAM
            - PAO
            - VOL
            - WIR
            - SCO
            - KAN
            - WWI
            - WWP
            - LIG
            - BOU
            - REC
            - PRA
        NL_usage_type:
          type: string
          description: The usage type based on the VERA standard defined in the Netherlands, as described in the "BESTEMMING" variable, detailed in the "Vastgoed" tab of appendix F.2 of VERA version 3.1. If this API is used in another country, then the enumeration of options for construction types should be changed to fit the local context or put in a different variable.
          enum:
            - KOO
            - HUU
            - SLO
        NL_pv_peak:
          type: number
          description: The peak capacity of the installed photovoltaic installation, in Wp. 
        NL_pv_orientation:
          type: number
          description: The orientation of the installed photovoltaic installation, in degrees, where 0 degrees means North. If pv panels are installed with multiple orientations, use the orientation of the surface that has the largest peak capacity.
        NL_pv_inclination:
          type: number
          description: The inclination of the installed photovoltaic installation, in degrees, where 0 degrees means horizontal. If pv panels are installed with multiple inclinations, use the average inclination.
        NL_max_power_consumption:
          type: number
          description: What is the maximum power consumption of the connection to the grid before it overloads, in kW? This is dependent on specific knowledge of the local grid and cannot be inferred from the type of connection.
        NL_site_Q_sh_demand:
          type: number
          description: What is the guaranteed maximum demand for space heating ("netto warmtevraag") according to NEN7120, in kWh_th/m2/year?
        NL_surface_area:  
          type: number
          description: What is the surface area ("gebruiksoppervlak") as defined by NEN2580, in m2?
        context:
          description: Must be specified as "NL".
          type: string
    norm_array:
      type: array
      description: An array of norms supported by a specific connection, with version numbers of the norms.
      items:
        oneOf:
          - $ref: '#/components/schemas/norm_definition'
          - $ref: '#/components/schemas/norm_data_objects_only'
          - $ref: '#/components/schemas/norm_definition_and_data_objects'
    norm_definition:
      type: object
      description: Norm metadata describing a specific monitoring norm without the related data objects. Optional inclusion of site-specific data associated with the monitoring norm (e.g. countries where the norm is active). The log contains information about when installations associated with this norm are changed (e.g. replacement of faulty pv-inverter).
      properties:
        name:
          type: string
          description: Name of the monitoring norm (e.g. EPV, NOM Keur, Monitoring Norm).
        version:
          type: string
          description: Version of the monitoring norm (e.g. 1.0). 
        norm_id:
          type: string
          description: The ID for the norm object, which can be used to read from the /norm/{norm_id} endpoint. 
        site:
          type: object
          description: Metadata with properties about the site associated with the norm described.
        norm_log:
          $ref: '#/components/schemas/log'
      required:
        - name
        - version
        - norm_id
    norm_data_objects_only:
      type: object
      description: Includes all data objects unique to a connection (usually a home) and a specific version of a monitoring norm that describe a) which data objects are relevant to this connection, b) what the target values are for these variables for this connection, and c) in the case that these variables are not measured but calculated, how these variables are calculated from measurements for this connection. It may also include site specific variables related to the norm.
      properties:
        norm_id:
          type: integer
          description: Unique identifier of a specific version of a norm.
        rel_data_objects:
          type: array
          description: Array of all related data objects and their definitions.
          items: 
            $ref: '#/components/schemas/data_object_definition'
        site:
          $ref: '#/components/schemas/norm_definition/properties/site'
      required:
        - norm_id
        - rel_data_objects
    norm_definition_and_data_objects:
      allOf:
        - $ref: '#/components/schemas/norm_definition'
        - $ref: '#/components/schemas/norm_data_objects_only'
        # TO DO: reference_value:
        #   how to set the target values for specific data_objects for a specific connection?
    data_object_array:
      type: array
      description: An array of data objects associated with a specific version of a norm.
      items:
        oneOf:
          - $ref: '#/components/schemas/data_object_definition'
          - $ref: '#/components/schemas/data_object_measurements'
          - $ref: '#/components/schemas/data_object_full'
    data_object_definition: 
      type: object
      description: The data_object_definition object describes the data that comes from a sensor or, if applicable, how the data is calculated from other data_objects.
      required: 
        - object_id
        - name
        - unit
      properties:
        object_id:
          type: integer
          description: Unique identifier of the data_object.
        name:
          type: string
          description: Name given to the data_object. Follow the API and any applicable monitoring norm guidelines as detailed in the documentation for the high level objects. Additionally, it is advised to follow standard nomenclature defined in the norm for underlying data objects used in calculations. 
        description:
          type: string
          description: Describes what the data_object measures.
          minLength: 1
          maxLength: 250
        unit: 
          type: string
          description: Gives the SI (or SI derived) unit of measurement.
        MID_certified: 
          type: boolean
          description: Describes wether the related sensor(s) is or are MID certified.
        members: 
          type: array
          description: If the data_object does not represent a primitive value, this array lists the data_members its values are calculated from, by data_object name.
          items:
            type: string
          #example:
          #  ["E_grid_T1","E_grid_T2","E_grid_nT1","E_grid_nT2"]
        operations: 
          type: array
          description: If the data_object does not represent a primitive value, this array Lists the data_members and operations performed (+,-,/,*) on these members. 
          items: 
            type: string
          #example: 
          #  ["E_grid_T1","+","E_grid_T2","-","E_grid_nT1","-","E_grid_nT2"]
    data_object_measurements:
      type: object
      description: Lists all the measurements of the data object. The log contains  details about these measurements, such as reasons for missing data or identified inaccuracies.
      properties:
        time_series:
          $ref: '#/components/schemas/time_series'
        data_object_log:
          $ref: '#/components/schemas/log'
    data_object_full:
      allOf:
        - $ref: '#/components/schemas/data_object_definition'
        - $ref: '#/components/schemas/data_object_measurements'
    time_series:
      oneOf:
        - $ref: '#/components/schemas/time_series_standard_options'
        - $ref: '#/components/schemas/time_series_seconds'
    time_series_standard_options:
      type: object
      description: A series of data points. Interval_standard is only required for aggregated values over defined time periods, e.g. a daily or hourly aggregate. It is not required if each data point represents a single measurement.
      required:
        - data
      properties:
        interval_standard: 
          type: string
          description: Pre-defined intervals periods based on common date-time conventions, some of which can vary in length (e.g. month, year). Each interval can be identified by the timestamp of the first second of that interval, for example the first second of January based on the time zone specified in the connection's profile (tzid). 
          enum:
            - minimum
            - hour
            - day
            - week
            - month
            - year
            - maximum
        data:
         type: array
         items:
          $ref: '#/components/schemas/data_point'    
    time_series_seconds:
      type: object
      description: Interval_standard is only required for aggregated values over defined time periods of a certain number of seconds. It is not required if each data point represents a single measurement.
      required:
        - data
      properties:
        interval_seconds:
          type: integer
          description: The number of seconds in an interval.
          format: int32
        data:
         type: array
         items:
          $ref: '#/components/schemas/data_point'
    data_point:
      type: array
      description: The data that comes from a sensor or an aggregation function. The first number is the time stamp, in POSIX seconds. If the data describes an aggregate value over a period of time, the time stamp is the first second of the corresponding time interval. The second number is the value.
      minItems: 2
      maxItems: 2
      items:
        type: number
    log:
      type: array
      description: The log is an array of different kinds of log entries.
      items:
        $ref: '#/components/schemas/log_entry'
    log_entry:
      type: object
      description: Each log entry is a description of one change, including when it occurred. 
      required:
        - entry
        - entry_type
        - start
      properties:
        entry: 
          type: string
          description: The entry is a description of the event.
        entry_type:
          type: string
          description: Describes the type of log entry. This can be an error, a warning or information.
          enum:
            - error
            - warning
            - information
        start:
          type: number
          description: Timestamp marking the start of the event, in POSIX seconds.
        end:
          type: number
          description: Timestamp marking the end of the event, in POSIX seconds. If not defined, the event is ongoing.
  securitySchemes:
    JWTBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: app.decode_token
      
    application:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://enermatics.eu/test/token'
          scopes:
            read: allows reading resources
            write: allows modifying resources
            normread: allows reading norm data